{
    "Main Function": {
        "prefix": "!",
        "body": ["#include <iostream>", "using namespace std;", "", "int main() {", "    $1", "    return 0;", "}"],
        "description": "Main function template"
    },
    "Competitive Programming Template": {
        "prefix": "cp",
        "body": ["#include <bits/stdc++.h>", "using namespace std;", "", "#define ll long long", "#define vi vector<int>", "#define vll vector<long long>", "#define pii pair<int, int>", "#define pll pair<long long, long long>", "#define MOD 1000000007", "#define INF 1e18", "", "void solve() {", "    $1", "}", "", "int main() {", "    ios_base::sync_with_stdio(false);", "    cin.tie(NULL);", "    ", "    int t;", "    cin >> t;", "    while(t--) {", "        solve();", "    }", "    return 0;", "}"],
        "description": "Competitive programming template"
    },
    "For Loop": {
        "prefix": "for",
        "body": ["for(int ${1:i} = 0; ${1:i} < ${2:n}; ${1:i}++) {", "    $3", "}"],
        "description": "For loop"
    },
    "Range For": {
        "prefix": "forr",
        "body": ["for(auto ${1:x} : ${2:container}) {", "    $3", "}"],
        "description": "Range-based for loop"
    },
    "Vector": {
        "prefix": "vec",
        "body": ["vector<${1:int}> ${2:v}(${3:size});"],
        "description": "Vector declaration"
    },
    "Map": {
        "prefix": "map",
        "body": ["map<${1:int}, ${2:int}> ${3:mp};"],
        "description": "Map declaration"
    },
    "Set": {
        "prefix": "set",
        "body": ["set<${1:int}> ${2:s};"],
        "description": "Set declaration"
    },
    "Pair": {
        "prefix": "pair",
        "body": ["pair<${1:int}, ${2:int}> ${3:p};"],
        "description": "Pair declaration"
    },
    "Class": {
        "prefix": "class",
        "body": ["class ${1:ClassName} {", "private:", "    $2", "public:", "    ${1:ClassName}() {", "        $3", "    }", "};"],
        "description": "Class template"
    },
    "Function": {
        "prefix": "func",
        "body": ["${1:int} ${2:function_name}(${3:parameters}) {", "    $4", "    return ${5:0};", "}"],
        "description": "Function template"
    }
}
